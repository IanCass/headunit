// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

dependencies {
    compile 'com.google.protobuf:protobuf-lite:3.0.0'
    compile 'com.google.protobuf.nano:protobuf-javanano:3.1.0'
    compile 'com.android.support:support-core-utils:25.0.1'
    compile 'com.android.support:support-media-compat:25.0.1'
    compile 'com.android.support:recyclerview-v7:25.0.1'
}

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.3'

    defaultConfig {
        applicationId "ca.yyx.hu"
        minSdkVersion 16
        targetSdkVersion 16

        versionCode 22
        versionName "2015_11_28"

        ndk {
            moduleName "hu_jni"
        }

        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_TOOLCHAIN=clang"
                abiFilters "armeabi", "armeabi-v7a"
            }
        }
    }

    externalNativeBuild {
        cmake{
            path "CMakeLists.txt"
        }
    }

    signingConfigs {
        debug {
            storeFile file(HEADUNIT_KEYSTORE_FILE)
            storePassword HEADUNIT_KEYSTORE_PASSWORD
            keyAlias HEADUNIT_KEY_ALIAS
            keyPassword HEADUNIT_KEY_PASSWORD
        }

        release {
            storeFile file(HEADUNIT_KEYSTORE_FILE)
            storePassword HEADUNIT_KEYSTORE_PASSWORD
            keyAlias HEADUNIT_KEY_ALIAS
            keyPassword HEADUNIT_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main {
            proto {
                srcDir 'src/main/proto'
            }
            java {
                // include self written and generated code
                srcDirs 'src/main/java', 'generated-sources/main/java'
            }
        }
        // remove the test configuration - at least in your example you don't have a special test proto file
    }

    lintOptions {
        abortOnError false
    }

    protobuf {
        // Configure the protoc executable
        protoc {
            // Download from repositories
            artifact = 'com.google.protobuf:protoc:3.0.0'
        }

        generateProtoTasks.generatedFilesBaseDir = 'generated-sources'

        plugins {
            javalite {
                // The codegen for lite comes as a separate artifact
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
            }
        }

        generateProtoTasks {
            all().each { task ->
                task.plugins {
                    javalite { }
                }
            }
        }
    }

    /*
    task genSource(type: Exec) {
        println "Executing " + HEADUNIT_SCRIPT_FILE
        commandLine HEADUNIT_SCRIPT_FILE
    }

    preBuild.dependsOn genSource
    */

}

